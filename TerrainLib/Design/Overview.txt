Goals
	Basic convex terrain chunks
	Entity placement
	Integrate with pathing for generating navmesh data
	Raycast routines needed
		Ray
		RayRadius
		RayCapsule
		RayAxialBox
		RayOrientedBox
		For swept shapes, can probably do the node checks with AABB or sphere to decide
			if deeper recursion is required, then just do the real shapes at leafs
		Maybe just plane shift the node boxes a bit
	TextureAtlas based shading
		Test textures
			Grassland
			Snow
			Rocky
			Forest Undergrowth
			Beachy sand for water areas
			Lava
			Cracked mud?
			Black rock?
	Editing
		Scale factor of each atlas piece
		Vertical texturing for steep walls?
			Certain atlas parts could be reserved for vertical

Collision
	QuadTree for basic convex
	Octree for volumey / diggy diggy
	AABB for nodes
		Fast reject, no accuracy needed
	Leaf Nodes
		Concave stuff often (depends on leaf node size)
			Per poly collision?
				How to plane shift this for swept shapes?
			Build into a list of convex volumes?
				Use old bsp heuristic for picking split plane?
				Complicates runtime editing and diggery
				Much easier to collide with though
				For QuadTree this would be the polygons for Y+ side
					then the volume underneath made up of node bounds
					with -Y being the bottom bound plane
				Bonus of this is start inside conditions easier to detect
				Downside is collisions might report from the side planes
					In theory closer hits would make this ok
				For convex terrain, know it is convex in Y
					Can use edge planes to split
			2D bsp?
				faces might get split